/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface EscrowContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "getInvoiceBalance"
      | "invoiceBalances"
      | "invoiceStatus"
      | "platformTreasury"
      | "releasePayment"
      | "usdctToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Escrowed" | "Released"): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvoiceBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceBalances",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invoiceStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "platformTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasePayment",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usdctToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvoiceBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invoiceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdctToken", data: BytesLike): Result;
}

export namespace EscrowedEvent {
  export type InputTuple = [
    invoiceId: BytesLike,
    employer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    invoiceId: string,
    employer: string,
    amount: bigint
  ];
  export interface OutputObject {
    invoiceId: string;
    employer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReleasedEvent {
  export type InputTuple = [
    invoiceId: BytesLike,
    freelancer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    invoiceId: string,
    freelancer: string,
    amount: bigint
  ];
  export interface OutputObject {
    invoiceId: string;
    freelancer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EscrowContract extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowContract;
  waitForDeployment(): Promise<this>;

  interface: EscrowContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [invoiceId: BytesLike, employer: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getInvoiceBalance: TypedContractMethod<
    [invoiceId: BytesLike],
    [bigint],
    "view"
  >;

  invoiceBalances: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  invoiceStatus: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  platformTreasury: TypedContractMethod<[], [string], "view">;

  releasePayment: TypedContractMethod<
    [
      invoiceId: BytesLike,
      freelancer: AddressLike,
      amountToFreelancer: BigNumberish,
      advanceRepaymentAmount: BigNumberish,
      advancePool: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;

  usdctToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [invoiceId: BytesLike, employer: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getInvoiceBalance"
  ): TypedContractMethod<[invoiceId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "invoiceBalances"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "invoiceStatus"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releasePayment"
  ): TypedContractMethod<
    [
      invoiceId: BytesLike,
      freelancer: AddressLike,
      amountToFreelancer: BigNumberish,
      advanceRepaymentAmount: BigNumberish,
      advancePool: AddressLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "usdctToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Escrowed"
  ): TypedContractEvent<
    EscrowedEvent.InputTuple,
    EscrowedEvent.OutputTuple,
    EscrowedEvent.OutputObject
  >;
  getEvent(
    key: "Released"
  ): TypedContractEvent<
    ReleasedEvent.InputTuple,
    ReleasedEvent.OutputTuple,
    ReleasedEvent.OutputObject
  >;

  filters: {
    "Escrowed(bytes32,address,uint256)": TypedContractEvent<
      EscrowedEvent.InputTuple,
      EscrowedEvent.OutputTuple,
      EscrowedEvent.OutputObject
    >;
    Escrowed: TypedContractEvent<
      EscrowedEvent.InputTuple,
      EscrowedEvent.OutputTuple,
      EscrowedEvent.OutputObject
    >;

    "Released(bytes32,address,uint256)": TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
    Released: TypedContractEvent<
      ReleasedEvent.InputTuple,
      ReleasedEvent.OutputTuple,
      ReleasedEvent.OutputObject
    >;
  };
}
